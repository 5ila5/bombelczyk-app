import 'dart:collection';

import 'package:flutter/material.dart';
import 'dart:io';
import 'dart:typed_data';
import 'dart:convert';
import 'dart:async';
import 'package:http/http.dart' as http;
import 'package:http/io_client.dart';
import 'package:http/io_client.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
//import 'package:encrypt/encrypt.dart' as encrypt;
//import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class MyHttpOverrides extends HttpOverrides{
  @override
  HttpClient createHttpClient(SecurityContext context){
    return super.createHttpClient(context)
      ..badCertificateCallback = (X509Certificate cert, String host, int port)=> true;
  }
}


void main() {
  HttpOverrides.global = new MyHttpOverrides();
  runApp(MyApp());
}

class AufzugsArgumente {
  final String json;
  final String aNr;
  final String aStr;
  final String aPLZ;
  final String aOrt;
  final String aFZ;


  AufzugsArgumente(this.aNr,this.json,this.aStr,this.aPLZ,this.aOrt,this.aFZ);
}

class Aufzug extends StatelessWidget {
  static const aufzugRoute = '/aufzugRoute';
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    print("build Aufzug");
    return AufzugPage(title: 'Aufzugs Übersicht');
      /*
      appBar: AppBar(
        title: Text("widget"),
      ),
      body: Center(
        child: Text("hi"),
      ),
      );
      */
    //);
  }
}

class AufzugPage extends StatefulWidget {
  AufzugPage({Key key, this.title}) : super(key: key);


  final String title;

  @override
  AufzugPageState createState() => AufzugPageState();

}


class AufzugPageState extends State<AufzugPage> {

  @override
  Widget build(BuildContext context) {


    final AufzugsArgumente args = ModalRoute.of(context).settings.arguments;
    Map<String, dynamic> _responseMap = Map<String, dynamic>.from(jsonDecode(args.json));
    List<Widget> workWidget = [];


    workWidget.add(DataTable(

      headingRowHeight: 0,

      columns: [
        DataColumn(
          label: Text(""),
        ),
        DataColumn(label: Text("")),
      ],
      rows: [
        DataRow(
            cells: [
              DataCell(Text("Aufzugsnummer")),
              DataCell(Text(args.aNr)),
            ]
        ),
        DataRow(
            cells: [
              DataCell(Text("Ort")),
              DataCell(Text(args.aOrt)),
            ]
        ),
        DataRow(
            cells: [
              DataCell(Text("PLZ")),
              DataCell(Text(args.aPLZ)),
            ]
        ),
        DataRow(
            cells: [
              DataCell(Text("Strase + Hausnummer")),
              DataCell(Text(args.aStr)),
            ]
        ),
        DataRow(
            cells: [
              DataCell(Text("Anfahrtszeit")),
              DataCell(Text(args.aFZ)),
            ]
        ),
    ],


    ),);

      //dasf
    workWidget.add(
        Divider(
            thickness: 3,
            height: 50,
            color: Colors.black
        )
    );

    IconData icon; //= Icons.check_box;
    _responseMap.forEach((key, value) {
      if (value["akku"]=="true")
        icon = Icons.check_box;
      else
        icon = Icons.check_box_outline_blank;



      workWidget.add(
        Table(
          //border: TableBorder.all(),
          //headingRowHeight: 0,
          children: [
            TableRow(children: [
              Text("Datum"),
              Text(value["date"]),
            ]),
            TableRow(children: [
              Text("Monteur"),
              Text(value["arbeiter"]),
            ]),
            TableRow(
              children: [
                 Text("Arbeit"),
                  Text(value["areit"]),
                ]
            ),
            TableRow(
              children: [
                  Text("Kurtztext"),
                  Text(value["ktxt"]),
                ]
            ),
            TableRow(
              children: [
                Text("Akkutausch"),
                Icon(icon),

                      //Text(value["dat"])),
                ],
            ),

          ],
        ),
      );
      workWidget.add(
          Divider(
            thickness: 3,
              color: Colors.grey
          )
      );



    });


    print("build AufzugPageState");
    return Scaffold(
      appBar: AppBar(
        title: Text(args.aNr+ ", "+ args.aStr),
      ),
      body: Center(
        child: ListView(
          //crossAxisAlignment: CrossAxisAlignment.stretch,
      children: workWidget,

        ),


         /*
        child: ElevatedButton(
          child: Text('Open route'),
          onPressed: () {
            // Navigate to second route when tapped.
          },
        ),*/
      ),
    );
  }


}

class MyApp extends StatelessWidget {

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      routes: {
        Aufzug.aufzugRoute: (context) => Aufzug(),
      },
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,

          //Color.fromRGBO(0, 77, 170, 1)
      ),
      home: MyHomePage(title: 'Aufzugs Übersicht'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);


  final String title;

  @override
  MyHomePageState createState() => MyHomePageState();

}


class MyHomePageState extends State<MyHomePage> {
  //String codeDialog ="";
  int _selectedIndex = 0;
  static List<Widget> _widgetOptions;

  
  String _ipToAsk = '192.168.168.148';
  bool  _sortDirection = false;
  Socket socket;
  int _counter = 0;
  Map<String, dynamic> _responseMap;
  bool _requestError = false;
  int _sort = 1;
  final _searchController = TextEditingController();
  final _passwordController = TextEditingController();
  List<Widget> _tabelletop;
  List<DataRow> _tabelle = [];
  int _currentSortColumn=1;
  bool _isAscending = true;

  @override
  void initState(){
    super.initState();
    checkKey();
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.portraitUp,
    ]);
  }

  @override
  Widget build(BuildContext context) {
    print( MediaQuery.of(context).size.width.toString());
    print( ((MediaQuery.of(context).size.width-50)/6).toString());
    _widgetOptions = <Widget>[
      Column(
        children: <Widget>[
          Container(
            child: Padding(
              padding:const EdgeInsets.fromLTRB(20, 5, 20, 20),
            //width:200.0,

              child: TextField(
                controller: _searchController,
                onChanged: (value){refreshTable(value);},

                style: TextStyle(
                  //height: 1,
                  //fontSize: 40.0,
                  color: Colors.black,
                  //backgroundColor: Colors.lightGreen,
                ),
                decoration:  InputDecoration(
                    prefixIcon : Icon(Icons.search),
                    border: InputBorder.none,
                    hintText: 'Suche Aufzuge',
                    enabledBorder: const OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(20.0)),
                      borderSide: const BorderSide(
                      color: Colors.grey,
                      ),
                    ),
                ),
              ),
            ),
          ),

          new Expanded(

            //child: Padding(

            //padding:const EdgeInsets.fromLTRB(5, 0, 0, 0),
            //padding:const EdgeInsets.fromLTRB(5, 0, 0, 3),
               child: SingleChildScrollView(
                 //scrollDirection:
                 scrollDirection: Axis.vertical,
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
              child: DataTable(
                sortAscending: _isAscending,
                sortColumnIndex: _currentSortColumn,
                columnSpacing: 5,

                columns: [
                  DataColumn(label:  Text("Aufzugsnummer")),
                  DataColumn(label:  Text("Straße")),
                  DataColumn(label:  Text("PLZ")),
                  DataColumn(label:  Text("Ort")),
                  DataColumn(label: Text("Fahrzeit")),
                  DataColumn(label: Text("Maps")),
                ],
                rows: _tabelle,

              ),
    ),

                )
              /*GridView.count(
              crossAxisCount: 6,
              children: _tabelle //[Text("hallo"),Text("hallo2"),Text("hallo3"),Text("hallo4"),Text("hallo5"),Text("hallo6"),Text("hallo7"),Text("hallo8")]
            ),*/
         // )

          ),
        ],
      ),
      Text(
          'Hier Kommt so Batterei Zeug hin',
      ),
      Text(
          'Vielleicht kommt hier noch irgendwas hin',
      ),
    ];
    //refreshTable("");
    _tabelletop = [
      InkWell(
        onTap: () { sortieren(0);},
        child: Text("Aufzugsnummer",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
      InkWell(
        onTap:() { sortieren(1);},
        child:  Text("Straße",style: TextStyle(fontWeight:FontWeight.bold)),),
      //Text("Hausnummer",style: TextStyle(fontWeight:FontWeight.bold)),
      InkWell(
        onTap:() { sortieren(2);},
        child:  Text("PLZ",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
      InkWell(
        onTap:() { sortieren(3);},
        child:  Text("Ort",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
      InkWell(
        onTap:() { sortieren(4);},
        child:  Text("Fahrzeit",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
      InkWell(
        child:  Text("maps",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
    ];

    return Scaffold(
      appBar: AppBar(

        title: Text(widget.title),
      ),
      body: Center(
        child: _widgetOptions.elementAt(_selectedIndex),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.search),
            label: 'Aufzugssuche',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.battery_charging_full_outlined),
            label: 'Akku',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.elevator_outlined),
            label: 'School',
          ),
        ],
        currentIndex: _selectedIndex,
        //selectedItemColor: Colors.amber[800],
        selectedItemColor: Colors.blue,
        onTap: _onItemTapped,
      ),

      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
      // This trailing comma makes auto-formatting nicer for build methods.
    );

  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }


  void sortieren(int sort) {
    if (_sort == sort) {
      _sortDirection = !_sortDirection;
    } else {
      _sort = sort;
    }
    refreshTable(_searchController.text);
  }

  void _incrementCounter() async{
    final prefs = await SharedPreferences.getInstance();
    prefs.remove("key");
    checkKey();
    /*
    final plainText = 'zu verschlüsselnde Nachricht';
    //final key = encrypt.Key.fromLength(32);
    final key = encrypt.Key.fromUtf8('ed275kcAE2LyjyYTX5oey7VKIoiqjHxn');
    final iv = encrypt.IV.fromLength(16);
    final encrypter = encrypt.Encrypter(encrypt.AES(key, mode: encrypt.AESMode.cbc));
    print(encrypt.Key.fromLength(32));


    final encrypted = encrypter.encrypt(plainText, iv: iv);
    final decrypted = encrypter.decrypt(encrypted, iv: iv);

    print("decrypted"); // Lorem ipsum dolor sit amet, consectetur adipiscing elit

    print(decrypted); // Lorem ipsum dolor sit amet, consectetur adipiscing elit
    print("encrypted");
    print(encrypted.base64);

    print(_tabelle);
    //search("seeheim");
    setState(() {
      _counter++;
    });*/
  }

  void setKey() async {
    print("setKey");
    final prefs = await SharedPreferences.getInstance();
    String pass = _passwordController.text;
    print("pass:"+pass);
    if (pass.length<1) {
      wrongKey();
      return;
    }

    http.Response response =
    await http.post(
      //Uri.https('silas.lan.home', 'BombelApp/index.php'),
      Uri.https(_ipToAsk, 'BombelApp/login.php'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'password': pass,
      }),
    );
    print("test1");
    String respnse = response.body.replaceAll("\n", "");
    print("test2");
    print("response:"+respnse+"|");
    print("response:"+respnse.length.toString());
    if (respnse == "false"||respnse.length!=32) {
      print("false:");
      wrongKey();
      return;
    }
    print("keySet:");
    prefs.setString("key", respnse);


  }

  Future<String> checkKey () async {
    print("CheckKey:");
    final prefs = await SharedPreferences.getInstance();
    if (prefs.containsKey("key")) {
      http.Response response =
      await http.post(
        //Uri.https('silas.lan.home', 'BombelApp/index.php'),
        Uri.https(_ipToAsk, 'BombelApp/index.php'),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
        body: jsonEncode(<String, String>{
          'auth': prefs.getString("key"),
        }),
      );
      String respnse = response.body.replaceAll("\n", "");
      print("response:"+respnse);
      if (respnse=="true")
        return prefs.getString("key");
    }
    //showDialog(context: context,
    wrongKey();
    return "";

  }

  void wrongKey() {
    print("wrongKey:");
    _displayTextInputDialog(context);

  }

  Future<void> _displayTextInputDialog(BuildContext context) async {
    return showDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            title: Text('TextField in Dialog'),
            content: TextField(
              onSubmitted: (value) {
                setKey();
                Navigator.pop(context);
              },
              controller: _passwordController,
              decoration: InputDecoration(hintText: "Text Field in Dialog"),
            ),
            actions: <Widget>[
              FlatButton(
                color: Colors.green,
                textColor: Colors.white,
                child: Text('OK'),
                onPressed: () {
                  setState(() {
                    //codeDialog = valueText;
                    setKey();
                    Navigator.pop(context);

                  });
                },
              ),

            ],
          );
        });
  }

  void refreshTable(String text) {
    if (text.length>2)
      search(text);
    else {
      setState(() {
        //_tabelle = _tabelletop;
      });

    }


  }

  void search(String search) async {
    final prefs = await SharedPreferences.getInstance();
    //print(prefs.getString("key"));
    if (!prefs.containsKey("key")) {
      print("Send Without Key");
      wrongKey();
      return;
    }
    
    http.Response response =
    await http.post(
      //Uri.https('silas.lan.home', 'BombelApp/index.php'),
      Uri.https(_ipToAsk, 'BombelApp/index.php'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'search': search,
        'auth': prefs.getString("key"),
        //'auth':"12345678910",
        "sort": _sort.toString(),
        "sortDirection": _sortDirection.toString(),
      }),
    );
    //print(response.toString());
    //print(response.body);


    print(jsonEncode(<String, String>{
      'search': search,
      'auth': prefs.getString("key"),
      "sort": _sort.toString(),
      "sortDirection": _sortDirection.toString(),
    }));

    String responseStr = response.body.replaceAll("\n", "");
    print(responseStr);
    if (responseStr =="false") {
      wrongKey();
      return;
    }


    //print(jsonDecode(respnse)["10"]["Anr"]);

    //print(jsonDecode(respnse).runtimeType);


  print("HALLLLOOO");

    _responseMap = Map<String, dynamic>.from(jsonDecode(responseStr));
    print("HALLLLOOO2");
    //print(_responseMap);
    //print("\n\n\n");
    //print("\n\n\n");
    //print("\n\n\n");
    if (_responseMap["error"]) {
      _requestError = true;
      return;
    }
    _requestError = false;
    _responseMap.remove("error");
    //print(_responseMap);
    processData();
  }

  void processData () {
    if (_requestError)
      return;


    Map<String, dynamic> map2;
    Map<String, dynamic> map2Copy;
    List<DataRow> tmpTabelle = [];

    _responseMap.forEach((key, value) {
      //print("value"+key+":");
      //print(value);
      //print(value.runtimeType);
      map2 = Map<String, dynamic>.from(value);
      //map2Copy = Map<String, dynamic>.from(map2);

      value.forEach((key2, value2) {
        if (key2=="Astr") {
          map2["Astr"] += " "+map2["Ahnr"];
          map2.remove("Ahnr");
        }
      });

      tmpTabelle.add(
        DataRow(cells: [
          DataCell(InkWell(
              child: Container(constraints: BoxConstraints(maxWidth: 200), child: Text(map2["Anr"].toString())),
              onTap: () {
                selectElevator(map2["Anr"].toString(), map2["Astr"].toString(), map2["plz"].toString(), map2["Ort"].toString(), map2["FK_zeit"].toString());
              },
          )),
          DataCell(InkWell(
            child: Container(constraints: BoxConstraints(maxWidth: 200), child: Text(map2["Astr"].toString())),
            onTap: () {
              selectElevator(map2["Anr"].toString(), map2["Astr"].toString(), map2["plz"].toString(), map2["Ort"].toString(), map2["FK_zeit"].toString());
            },
          )),
          DataCell(InkWell(
            child: Container(constraints: BoxConstraints(maxWidth: 200), child: Text(map2["plz"].toString())),
            onTap: () {
              selectElevator(map2["Anr"].toString(), map2["Astr"].toString(), map2["plz"].toString(), map2["Ort"].toString(), map2["FK_zeit"].toString());
            },
          )),          DataCell(InkWell(
            child: Container(constraints: BoxConstraints(maxWidth: 200), child: Text(map2["Ort"].toString())),
            onTap: () {
              selectElevator(map2["Anr"].toString(), map2["Astr"].toString(), map2["plz"].toString(), map2["Ort"].toString(), map2["FK_zeit"].toString());
            },
          )),
          DataCell(InkWell(
            child: Container(constraints: BoxConstraints(maxWidth: 200), child: Text(map2["FK_zeit"].toString())),
            onTap: () {
              selectElevator(map2["Anr"].toString(), map2["Astr"].toString(), map2["plz"].toString(), map2["Ort"].toString(), map2["FK_zeit"].toString());
            },
          )),

          DataCell(InkWell(
            child: Icon(Icons.map_outlined),
            onTap: () {
              launch("https://www.google.de/maps/search/?api=1&query="+map2["Astr"].toString()+       ",+"+map2["plz"].toString()+"+"+map2["Ort"].toString());
                                                                                  //"+"+map2["Ahnr"].toString()+
              },
          )),
        ]),
      );

/*
      map2.forEach((key2, value2) {
        tmpTabelle.add(
            //Text(value2.toString())
          new InkWell(
          child: Text(value2.toString()),
            onTap: () {
              selectElevator(value["Anr"].toString(), map2["Astr"].toString(), value["plz"].toString(), value["Ort"].toString(), value["FK_zeit"].toString());
            },
          )
        );
        print(value2);
      });
      tmpTabelle.add(
        new InkWell(
          child: Text("maps"),
          onTap: () {
            launch("https://www.google.de/maps/search/?api=1&query="+value["Astr"].toString()+"+"+value["Ahnr"].toString()+",+"+value["plz"].toString()+"+"+value["Ort"].toString());
          },
        )
      );

    });

 */
    //tmpTabelle.insertAll(0, _tabelletop);
    setState(() {
      _tabelle = tmpTabelle;
    });

    //return jsonDecode(respnse);


    //print(response.headers);
    //print(response.request);

  });
  }

  void selectElevator(String nr,str,pLZ,ort,fZ) async{
    final prefs = await SharedPreferences.getInstance();
    print(nr);
    http.Response response =
        await http.post(
      //Uri.https('silas.lan.home', 'BombelApp/index.php'),
      Uri.https(_ipToAsk, 'BombelApp/index.php'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'Anr': nr,
        'auth': prefs.getString("key"),
      }),
    );
    String responseStr = response.body.replaceAll("\n", "");
    print("test");
    print(responseStr);
    //AufzugsArgumente(nr, responseStr);
    Navigator.pushNamed(
      context,
      Aufzug.aufzugRoute,
      //MaterialPageRoute(builder: (context) => Aufzug()),
      arguments: AufzugsArgumente(nr, responseStr,str,pLZ,ort,fZ),

    );

  }



  }








