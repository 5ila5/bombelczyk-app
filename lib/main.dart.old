import 'dart:collection';

import 'package:flutter/material.dart';
import 'dart:io';
import 'dart:typed_data';
import 'dart:convert';
import 'dart:async';
import 'package:http/http.dart' as http;
import 'package:http/io_client.dart';
import 'package:http/io_client.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
//import 'package:encrypt/encrypt.dart' as encrypt;
//import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class MyHttpOverrides extends HttpOverrides{
  @override
  HttpClient createHttpClient(SecurityContext context){
    return super.createHttpClient(context)
      ..badCertificateCallback = (X509Certificate cert, String host, int port)=> true;
  }
}


void main() {
  HttpOverrides.global = new MyHttpOverrides();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Aufzugs Übersicht'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}




class _MyHomePageState extends State<MyHomePage> {
  //String codeDialog ="";
  
  String _ipToAsk = '192.168.168.148';
  bool  _sortDirection = false;
  Socket socket;
  int _counter = 0;
  Map<String, dynamic> _responseMap;
  bool _requestError = false;
  int _sort = 1;
  final _searchController = TextEditingController();
  final _passwordController = TextEditingController();
  List<Widget> _tabelletop;
  List<Widget> _tabelle = [Text("")];


  void sortieren(int sort) {
    if (_sort == sort) {
      _sortDirection = !_sortDirection;
    } else {
      _sort = sort;
    }
    refreshTable(_searchController.text);
  }
  void _incrementCounter() async{
    final prefs = await SharedPreferences.getInstance();
    prefs.remove("key");
    checkKey();
    /*
    final plainText = 'zu verschlüsselnde Nachricht';
    //final key = encrypt.Key.fromLength(32);
    final key = encrypt.Key.fromUtf8('ed275kcAE2LyjyYTX5oey7VKIoiqjHxn');
    final iv = encrypt.IV.fromLength(16);
    final encrypter = encrypt.Encrypter(encrypt.AES(key, mode: encrypt.AESMode.cbc));
    print(encrypt.Key.fromLength(32));


    final encrypted = encrypter.encrypt(plainText, iv: iv);
    final decrypted = encrypter.decrypt(encrypted, iv: iv);

    print("decrypted"); // Lorem ipsum dolor sit amet, consectetur adipiscing elit

    print(decrypted); // Lorem ipsum dolor sit amet, consectetur adipiscing elit
    print("encrypted");
    print(encrypted.base64);

    print(_tabelle);
    //send("seeheim");
    setState(() {
      _counter++;
    });*/
  }



  @override
  void initState(){
    super.initState();
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.portraitUp,
    ]);
  }

  void setKey() async {
    print("setKey");
    final prefs = await SharedPreferences.getInstance();
    String pass = _passwordController.text;
    print("pass:"+pass);
    if (pass.length<1) {
      wrongKey();
      return;
    }

    http.Response response =
    await http.post(
      //Uri.https('silas.lan.home', 'BombelApp/index.php'),
      Uri.https(_ipToAsk, 'BombelApp/login.php'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'password': pass,
      }),
    );
    print("test1");
    String respnse = response.body.replaceAll("\n", "");
    print("test2");
    print("response:"+respnse+"|");
    print("response:"+respnse.length.toString());
    if (respnse == "false"||respnse.length!=32) {
      print("false:");
      wrongKey();
      return;
    }
    print("keySet:");
    prefs.setString("key", respnse);


  }

  Future<String> checkKey () async {
    print("CheckKey:");
    final prefs = await SharedPreferences.getInstance();
    if (prefs.containsKey("key")) {
      http.Response response =
      await http.post(
        //Uri.https('silas.lan.home', 'BombelApp/index.php'),
        Uri.https(_ipToAsk, 'BombelApp/index.php'),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
        body: jsonEncode(<String, String>{
          'auth': prefs.getString("key"),
        }),
      );
      String respnse = response.body;
      print("response:"+respnse);
      if (respnse=="true")
        return prefs.getString("key");
    }
    //showDialog(context: context,
    wrongKey();
    return "";

  }

  void wrongKey() {
    print("wrongKey:");
    _displayTextInputDialog(context);

  }

  Future<void> _displayTextInputDialog(BuildContext context) async {
    return showDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
            title: Text('TextField in Dialog'),
            content: TextField(
              onSubmitted: (value) {
                setKey();
                Navigator.pop(context);
              },
              controller: _passwordController,
              decoration: InputDecoration(hintText: "Text Field in Dialog"),
            ),
            actions: <Widget>[
              FlatButton(
                color: Colors.green,
                textColor: Colors.white,
                child: Text('OK'),
                onPressed: () {
                  setState(() {
                    //codeDialog = valueText;
                    setKey();
                    Navigator.pop(context);

                  });
                },
              ),

            ],
          );
        });
  }

  @override
  Widget build(BuildContext context) {

    //refreshTable("");
     _tabelletop = [
      InkWell(
        onTap: () { sortieren(0);},
        child: Text("Aufzugsnummer",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
      InkWell(
        onTap:() { sortieren(1);},
        child:  Text("Straße",style: TextStyle(fontWeight:FontWeight.bold)),),
      //Text("Hausnummer",style: TextStyle(fontWeight:FontWeight.bold)),
      InkWell(
        onTap:() { sortieren(2);},
        child:  Text("PLZ",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
      InkWell(
        onTap:() { sortieren(3);},
        child:  Text("Ort",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
      InkWell(
        onTap:() { sortieren(4);},
        child:  Text("Fahrzeit",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
      InkWell(
        child:  Text("maps",style: TextStyle(fontWeight:FontWeight.bold)),
      ),
    ];

    return Scaffold(
      appBar: AppBar(

        title: Text(widget.title),
      ),
      body: Center(

        child: Column(
            children: <Widget>[
              Container(
                //width:200.0,

                child: TextField(
                  controller: _searchController,
                  onChanged: (value){refreshTable(value);},

                  style: TextStyle(
                    height: 1,
                    fontSize: 40.0,
                    color: Colors.black,
                    //backgroundColor: Colors.lightGreen,
                  ),
                  decoration: InputDecoration(
                    border: InputBorder.none,
                    hintText: 'Enter a search term'
                  ),
                ),
              ),

              new Expanded(
                child: GridView.count(
                    crossAxisCount: 6,
                    children: _tabelle //[Text("hallo"),Text("hallo2"),Text("hallo3"),Text("hallo4"),Text("hallo5"),Text("hallo6"),Text("hallo7"),Text("hallo8")]
                ),
              ),
            ],
        ),


        /*
        child: Column(

          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
        */
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
        // This trailing comma makes auto-formatting nicer for build methods.
    );

  }

  void refreshTable(String text) {
    if (text.length>2)
      send(text);
    else {
      setState(() {
        _tabelle = _tabelletop;
      });

    }


  }

  void send(String search) async {
    final prefs = await SharedPreferences.getInstance();
    //print(prefs.getString("key"));
    if (!prefs.containsKey("key")) {
      print("Send Without Key");
      wrongKey();
      return;
    }
    
    http.Response response =
    await http.post(
      //Uri.https('silas.lan.home', 'BombelApp/index.php'),
      Uri.https(_ipToAsk, 'BombelApp/index.php'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'search': search,
        'auth': prefs.getString("key"),
        //'auth':"12345678910",
        "sort": _sort.toString(),
        "sortDirection": _sortDirection.toString(),
      }),
    );
    //print(response.toString());
    //print(response.body);


    print(jsonEncode(<String, String>{
      'search': search,
      'auth': prefs.getString("key"),
      "sort": _sort.toString(),
      "sortDirection": _sortDirection.toString(),
    }));

    String responseStr = response.body.replaceAll("\n", "");
    print(responseStr);
    if (responseStr =="false") {
      wrongKey();
      return;
    }


    //print(jsonDecode(respnse)["10"]["Anr"]);

    //print(jsonDecode(respnse).runtimeType);


  print("HALLLLOOO");

    _responseMap = Map<String, dynamic>.from(jsonDecode(responseStr));
    print("HALLLLOOO2");
    //print(_responseMap);
    //print("\n\n\n");
    //print("\n\n\n");
    //print("\n\n\n");
    if (_responseMap["error"]) {
      _requestError = true;
      return;
    }
    _requestError = false;
    _responseMap.remove("error");
    //print(_responseMap);
    processData();
  }

  void processData () {
    if (_requestError)
      return;


    Map<String, dynamic> map2;
    Map<String, dynamic> map2Copy;
    List<Widget> tmpTabelle = [];

    _responseMap.forEach((key, value) {
      //print("value"+key+":");
      //print(value);
      //print(value.runtimeType);
      map2Copy = Map<String, dynamic>.from(value);
      map2 = Map<String, dynamic>.from(map2Copy);

      map2Copy.forEach((key2, value2) {
        if (key2=="Astr") {
          map2["Astr"] += " "+map2["Ahnr"];
          map2.remove("Ahnr");
        }
      });
      map2.forEach((key2, value2) {
        tmpTabelle.add(Text(value2.toString()));
        print(value2);
      });
      tmpTabelle.add(
          new InkWell(
              child: Text("maps"),
            onTap: () {
              launch("https://www.google.de/maps/search/?api=1&query="+value["Astr"].toString()+"+"+value["Ahnr"].toString()+",+"+value["plz"].toString()+"+"+value["Ort"].toString());
            },

      ));
    });
    tmpTabelle.insertAll(0, _tabelletop);
    setState(() {
      _tabelle = tmpTabelle;
    });

    //return jsonDecode(respnse);


    //print(response.headers);
    //print(response.request);

  }



  }


  /*Socket socket;

    socket = await Socket.connect('192.168.168.148', 4567);
    print("hallo");

    print("hallo2");
    print('Connected to: ${socket.remoteAddress.address}:${socket.remotePort}');
    print("hallo3");

    socket.write("get,ü");
    socket.close();
    print("hallo4");

    socket.listen(dataHandler,
        onError: errorHandler,
        onDone: doneHandler,
        cancelOnError: false);
  });
  //Connect standard in to the socket
  //stdin.listen((data) => socket.write(new String.fromCharCodes(data).trim() + '\n'));
}

void dataHandler(data){
  print(new String.fromCharCodes(data).trim());
}

void errorHandler(error, StackTrace trace){
  print(error);
}

void doneHandler(){
  socket.destroy();
}*/





